name: Reusable docker build workflow
on:
  workflow_call:
    inputs:
      environment:
        description: 'The environment to build for'
        required: true
        type: string
      registry_url_suffix:
        description: 'The suffix for the registry URL'
        required: true
        type: string
      matrix_step_name:
        description: 'The name of the matrix step'
        required: false
        type: string
      matrix_key:
        description: 'The key for the matrix'
        required: true
        type: string
      docker_file_path:
        description: 'The Dockerfile to use for the build'
        required: true
        type: string

jobs:
  build:
    runs-on: depot-ubuntu-22.04
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      # - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     aws-region: us-east-2
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-2
          role-session-name: ${{ github.ref_name }}-build-dev
          role-to-assume: arn:aws:iam::494494944992:role/GithubImagePusher

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR repository if it does not exist
        run: |
          aws ecr describe-repositories --region us-east-2 --repository-names ${{ inputs.registry_url_suffix }} || aws ecr create-repository --repository-name ${{ inputs.registry_url_suffix }} --region us-east-2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        env:
          DOCKER_METADATA_PR_HEAD_SHA: true
        with:
          images: |
            ${{ secrets.ecr_url_prefix}}/${{ inputs.registry_url_suffix }}
          tags: |
            type=sha,priority=900,prefix=
            type=semver,priority=1000,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}.{{patch}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=ref,event=pr

      - name: json-output-check
        run: |
          echo "meta output json: ${{ steps.meta.outputs.json }}"

      - name: Go Build Cache for Docker
        uses: actions/cache@v3
        with:
          path: go-build-cache
          key: ${{ runner.os }}-${{ inputs.matrix_key }}-go-build-cache-${{ hashFiles('**/go.sum') }}

      - name: inject go-build-cache into docker
        uses: reproducible-containers/buildkit-cache-dance@v2.1.2
        with:
          cache-source: go-build-cache

      - name: Build and push
        uses: depot/build-push-action@v1
        with:
          context: .
          file: ${{ inputs.docker_file_path }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          project: "06dnhndwwg"
          push: true

      - name: Extract Docker version from tags
        id: extract
        shell: bash
        run: |
          echo "Meta output JSON:"
          echo '${{ steps.meta.outputs.json }}' > raw.json
          jq '.' raw.json

          version=$(jq -r '.tags[0]' raw.json)
          echo "version=$version" >> $GITHUB_OUTPUT

      # - name: check meta outputs
      #   id: checkmeta
      #   shell: bash
      #   run: |
      #     echo '${{ steps.meta.outputs.json }}' | jq -r '.tags[0]' > version.txt
      #     VERSION=$(cat version.txt)
      #     echo "version=$VERSION" >> $GITHUB_OUTPUT
      #     # echo "meta output json: ${{ steps.meta.outputs.json }}"
      #     # echo "meta output json fromJSON: ${{ fromJSON(steps.meta.outputs.json) }}"
      #     # echo "meta output json fromJson tags: ${{ fromJSON(steps.meta.outputs.json).tags }}"
      #     # echo "Docker tags: ${{ steps.meta.outputs.tags }}"
      #     # echo "Docker labels: ${{ steps.meta.outputs.labels }}"
      #     # echo "Docker version: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}"
      #     # echo "Docker tag: ${{ steps.meta.outputs.version }}"


    outputs:
      docker_version: ${{ steps.extract.outputs.version }}
      docker_tag: ${{ steps.meta.outputs.version }}

  write:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: check check
        run: |
          echo "Docker tag: ${{ needs.build.outputs.docker_tag }}"
          echo "Docker version: ${{ needs.build.outputs.docker_version }}"

      - name: Write matrix outputs
        uses: cloudposse/github-action-matrix-outputs-write@v1
        id: out
        with:
          matrix-step-name: ${{ inputs.matrix_step_name }}
          matrix-key: ${{ inputs.matrix_key }}
          outputs: |-
            version: ${{ needs.build.outputs.docker_version }}
            tag: ${{ needs.build.outputs.docker_tag }}
      - name: check
        run: |
          echo "Version: ${{ steps.out.outputs.result }}"
    outputs:
      version: ${{ fromJson(steps.out.outputs.result).version }}
      tag: ${{ fromJson(steps.out.outputs.result).tag }}